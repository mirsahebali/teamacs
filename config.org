#+title: TEAMACS
#+author: Mir Saheb Ali
#+startup: showeverything
#+options: toc:4

* Contents: :toc_3:
- [[#package-manager][Package Manager]]
- [[#evil-mode][Evil Mode]]
  - [[#undo-tree][Undo Tree]]
  - [[#auto-brackets][Auto Brackets]]
- [[#keymaps][Keymaps]]
  - [[#generalel][General.el]]
  - [[#which-key][Which Key]]
- [[#language-support][Language Support]]
  - [[#setup][Setup]]
  - [[#formatter][Formatter]]
  - [[#treesitter][Treesitter]]
  - [[#company][Company]]
  - [[#flycheck][Flycheck]]
  - [[#snippets][Snippets]]
  - [[#git][Git]]
  - [[#languages][Languages]]
    - [[#go][Go]]
    - [[#web-mode][Web Mode]]
    - [[#typescript][Typescript]]
    - [[#haskell][Haskell]]
    - [[#cc][C/C++]]
- [[#util-package][Util Package]]
  - [[#treemacs][Treemacs]]
  - [[#projectile][Projectile]]
  - [[#consult][Consult]]
  - [[#vertico][Vertico]]
  - [[#orderless][Orderless]]
  - [[#embark][Embark]]
  - [[#file-tree][File Tree]]
    - [[#dired-coloring][Dired Coloring]]
    - [[#ranger][Ranger]]
- [[#ui-themes][UI Themes]]
  - [[#rainbow-mode][Rainbow mode]]
  - [[#todo][Todo]]
  - [[#model-line][Model line]]
  - [[#icons][Icons]]
  - [[#tabs][Tabs]]
  - [[#fonts][Fonts]]
  - [[#gui-tweaks][GUI Tweaks]]
  - [[#packages-for-ui-and-theming][Packages for UI and theming]]
    - [[#theme][Theme]]
    - [[#dashboard][Dashboard]]
- [[#org-mode][ORG Mode]]
  - [[#org-package][ORG Package]]
  - [[#calendar][Calendar]]
  - [[#clip-link][Clip Link]]
  - [[#async-evalulation-of-src-blocks][Async Evalulation of SRC blocks]]
  - [[#fancy-priorites][Fancy Priorites]]
  - [[#superstar][Superstar]]
  - [[#evil-org][Evil Org]]
  - [[#indentation][Indentation]]
  - [[#org-bullets][ORG Bullets]]
  - [[#org-tempo][ORG Tempo]]
  - [[#toc][TOC]]
- [[#misc-tweaks][Misc Tweaks]]
  - [[#change-backup-directory][Change Backup directory]]
  - [[#transient][Transient]]
  - [[#calc-mode][Calc Mode]]
  - [[#buffer-move][Buffer Move]]
  - [[#reload-emacs-config][Reload Emacs config]]
  - [[#cpu-profiler][CPU Profiler]]
  - [[#add--at-the-end-of-shell-arguments][Add & at the end of shell arguments]]

* Package Manager

#+begin_src emacs-lisp
  (setq debug-on-error t)
          (defvar elpaca-installer-version 0.6)
          (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
          (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
          (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
          (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                        :ref nil
                                        :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                        :build (:not elpaca--activate-package)))
          (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
                 (build (expand-file-name "elpaca/" elpaca-builds-directory))
                 (order (cdr elpaca-order))
                 (default-directory repo))
            (add-to-list 'load-path (if (file-exists-p build) build repo))
            (unless (file-exists-p repo)
              (make-directory repo t)
              (when (< emacs-major-version 28) (require 'subr-x))
              (condition-case-unless-debug err
                  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                           ((zerop (call-process "git" nil buffer t "clone"
                                                 (plist-get order :repo) repo)))
                           ((zerop (call-process "git" nil buffer t "checkout"
                                                 (or (plist-get order :ref) "--"))))
                           (emacs (concat invocation-directory invocation-name))
                           ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                                 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                           ((require 'elpaca))
                           ((elpaca-generate-autoloads "elpaca" repo)))
                      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
                    (error "%s" (with-current-buffer buffer (buffer-string))))
                ((error) (warn "%s" err) (delete-directory repo 'recursive))))
            (unless (require 'elpaca-autoloads nil t)
              (require 'elpaca)
              (elpaca-generate-autoloads "elpaca" repo)
              (load "./elpaca-autoloads")))
          (add-hook 'after-init-hook #'elpaca-process-queues)
          (elpaca `(,@elpaca-order))

          ;; Install a package via the elpaca macro
        ;; See the "recipes" section of the manual for more details.

        ;; (elpaca example-package)

        ;; Install use-package support
        (elpaca elpaca-use-package
          ;; Enable :elpaca use-package keyword.
          (elpaca-use-package-mode)
          ;; Assume :elpaca t unless otherwise specified.
          (setq elpaca-use-package-by-default t))

        ;; Block until current queue processed.
        (elpaca-wait)

        ;;When installing a package which modifies a form used at the top-level
        ;;(e.g. a package which adds a use-package key word),
        ;;use `elpaca-wait' to block until that package has been installed/configured.
        ;;For example:
        ;;(use-package general :demand t)
        ;;(elpaca-wait)


        ;;Turns off elpaca-use-package-mode current declaration
        ;;Note this will cause the declaration to be interpreted immediately (not deferred).
        ;;Useful for configuring built-in emacs features.
    ;; A few more useful configurations...
;; (setq use-package-verbose t)
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)
  :elpaca nil
  :config (setq ring-bell-function #'ignore))
        ;; Don't install anything. Defer execution of BODY
        (elpaca nil (message "Hello TMX"))

#+end_src

* Evil Mode

#+begin_src emacs-lisp
    ;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil
          :init
    (setq evil-want-keybinding nil)
          :demand t
          :config
          (evil-mode))
(use-package evil-collection
          :after evil
          :custom (evil-collection-setup-minibuffer t)
          :config
          (evil-collection-init))
(use-package evil-goggles
    :after evil
    :ensure t
    :config
  (evil-goggles-mode)

  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; will be highlighed with `diff-removed` face which is typically
  ;; some red color (as defined by the color theme)
  ;; other faces such as `diff-added` will be used for other actions
  (evil-goggles-use-diff-faces))
;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
(use-package embrace)
 (use-package evil-surround
        :ensure t
        :config
  (setq-default evil-surround-pairs-alist
                (push '(?\( . ("(" . ")")) evil-surround-pairs-alist))
  (setq-default evil-surround-pairs-alist
                (push '(?\{ . ("{" . "}")) evil-surround-pairs-alist))
  (add-to-list 'evil-surround-operator-alist
               '(evil-paredit-change . change))
  (add-to-list 'evil-surround-operator-alist
               '(evil-paredit-delete . delete))
  ;; this macro was copied from here: https://stackoverflow.com/a/22418983/4921402
  (defmacro define-and-bind-quoted-text-object (name key start-regex end-regex)
    (let ((inner-name (make-symbol (concat "evil-inner-" name)))
          (outer-name (make-symbol (concat "evil-a-" name))))
      `(progn
         (evil-define-text-object ,inner-name (count &optional beg end type)
           (evil-select-paren ,start-regex ,end-regex beg end type count nil))
         (evil-define-text-object ,outer-name (count &optional beg end type)
           (evil-select-paren ,start-regex ,end-regex beg end type count t))
         (define-key evil-inner-text-objects-map ,key #',inner-name)
         (define-key evil-outer-text-objects-map ,key #',outer-name))))

  (define-and-bind-quoted-text-object "pipe" "|" "|" "|")
  (define-and-bind-quoted-text-object "slash" "/" "/" "/")
  (define-and-bind-quoted-text-object "asterisk" "*" "*" "*")
  (define-and-bind-quoted-text-object "dollar" "$" "\\$" "\\$") ;; sometimes your have to escape the regex

            (global-evil-surround-mode 1))
(use-package evil-embrace
:after evil
:elpaca (:host github :repo "cute-jumper/evil-embrace.el")
:init
(evil-embrace-enable-evil-surround-integration)
:config
(evil-embrace-enable-evil-surround-integration))
(use-package evil-snipe
:after evil
:config
(evil-snipe-mode +1)
(evil-snipe-override-mode +1))
(use-package evil-lion
    :after evil
    :ensure t
    :config
        (evil-lion-mode))
(use-package evil-easymotion
    :after evil
    :config
    (evilem-default-keybindings "SPC"))
(use-package evil-textobj-tree-sitter 
:ensure t
:after evil
:config
;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
(define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
;; bind `function.inner`(function block without name and args) to `f` for use in things like `vif`, `yif`
(define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))

;; You can also bind multiple items and we will match the first one we can find
(define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer")))
;; The first arguemnt to `evil-textobj-tree-sitter-get-textobj' will be the capture group to use
;; and the second arg will be an alist mapping major-mode to the corresponding query to use.
(define-key evil-outer-text-objects-map "m" (evil-textobj-tree-sitter-get-textobj "import"
                                              '((python-mode . [(import_statement) @import])
                                                (rust-mode . [(use_declaration) @import]))))
;; Goto start of next function
(define-key evil-normal-state-map
            (kbd "]f")
            (lambda ()
              (interactive)
              (evil-textobj-tree-sitter-goto-textobj "function.outer")))

;; Goto start of previous function
(define-key evil-normal-state-map
            (kbd "[f")
            (lambda ()
              (interactive)
              (evil-textobj-tree-sitter-goto-textobj "function.outer" t)))

;; Goto end of next function
(define-key evil-normal-state-map
            (kbd "]F")
            (lambda ()
              (interactive)
              (evil-textobj-tree-sitter-goto-textobj "function.outer" nil t)))

;; Goto end of previous function
(define-key evil-normal-state-map
            (kbd "[F")
            (lambda ()
              (interactive)
              (evil-textobj-tree-sitter-goto-textobj "function.outer" t t)))
)
(use-package evil-traces
:after evil
  :config
(setq evil-traces-idle-delay 0.05)
  (evil-traces-use-diff-faces) ; if you want to use diff's faces
  (evil-traces-mode))

(use-package targets
:defer t
:after (evil)
:elpaca (:host github :repo "noctuid/targets.el"))

(use-package evil-numbers
:after evil
:config
(define-key evil-normal-state-map (kbd "C-a =") 'evil-numbers/inc-at-pt)
(define-key evil-normal-state-map (kbd "C-a -") 'evil-numbers/dec-at-pt))
(use-package evil-nerd-commenter
:after evil)
(use-package evil-exchange 
:after evil
)
(use-package exato 
:after evil
:ensure t)
(use-package evil-mc
:ensure t
:after evil
)
(use-package  evil-multiedit
    :ensure t)
#+end_src
** Undo Tree
#+begin_src emacs-lisp

(use-package undo-fu
    :after evil
    :config
            (global-unset-key (kbd "C-z"))
            (global-set-key (kbd "C-z")   'undo-fu-only-undo)
            (global-set-key (kbd "C-S-z") 'undo-fu-only-redo))
(use-package undo-fu-session
        :after evil)
(use-package undo-tree
:config
:after evil
(global-undo-tree-mode))
(use-package vundo
:after evil)
#+end_src

** Auto Brackets
#+begin_src emacs-lisp
(electric-pair-mode)
#+end_src
* Keymaps

** General.el
#+begin_src emacs-lisp
(use-package general
:after evil
:config
(general-evil-setup)

(general-imap "j"
        (general-key-dispatch 'self-insert-command
                :timeout 0.25
                "k" 'evil-normal-state))

 (general-create-definer saheb/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode

(saheb/leader-keys
      "." '(find-file :wk "Find file"))


(saheb/leader-keys
"r" '(ranger :wk "Ranger Dired"))

(saheb/leader-keys
"\'" '(evil-collection-consult-mark :wk "Ranger Dired"))

  (saheb/leader-keys
      "b" '(:ignore t :wk "buffer")
      "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(consult-buffer :wk "Ibuffer")
      "b d" '(kill-this-buffer :wk "Kill this buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer"))

  (saheb/leader-keys
      "e" '(:ignore t :wk "Evaluate")    
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region")) 

  (saheb/leader-keys
      "h" '(:ignore t :wk "Help/Errors")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")
      "h e" '(flycheck-list-errors :wk  "List errors in buffer")
      ;;"h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))
      "h r r" '(reload-init-file :wk "Reload emacs config"))

  (saheb/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines"))
  (saheb/leader-keys
      "m b" '(:ignore t :wk "Tables")
      "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (saheb/leader-keys
      "m d" '(:ignore t :wk "Date/deadline")
      "m d t" '(org-time-stamp :wk "Org time stamp"))

  (saheb/leader-keys
      "p" '(projectile-command-map :wk "Projectile"))
  (saheb/leader-keys
      "a a" '(projectile-add-known-project :wk "Add project directory"))

  (saheb/leader-keys
      "q" '(kill-buffer-and-window :wk "Kill buffer and window"))

  (saheb/leader-keys
      "w" '(:ignore t :wk "Windows")
      ;; Window splits
      "w d" '(evil-window-delete :wk "Close window")
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split window")
      "w v" '(evil-window-vsplit :wk "Vertical split window")
      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
      ;; Move Windows
      "w H" '(buf-move-left :wk "Buffer move left")
      "w J" '(buf-move-down :wk "Buffer move down")
      "w K" '(buf-move-up :wk "Buffer move up")
      "w L" '(buf-move-right :wk "Buffer move right"))

;; 'ORG' mode keymaps

(saheb/leader-keys
   "m" '(:ignore t :wk "Org")
   "m a" '(org-agenda :wk "Org agenda")
   "m e" '(org-export-dispatch :wk "Org export dispatch")
   "m i" '(org-toggle-item :wk "Org toggle item")
   "m t" '(org-todo :wk "Org todo")
   "m B" '(org-babel-tangle :wk "Org babel tangle")
   "m T" '(org-todo-list :wk "Org todo list")
   "m d d" '(org-deadline :wk "Org Deadline")
   "m d s" '(org-schedule :wk "Org Schedule")
   "m n" '(org-cycle :wk "Org cycle"))

   (general-define-key 
       :states 'normal
       :keymaps 'org-mode-map
        "z i" 'org-toggle-inline-images
        ">" 'evil-org->
        "<" 'evil-org-<)
    (general-define-key 
       :states '(normal insert)
       :keymaps 'org-mode-map
            "C-S-j" 'org-shiftdown
            "C-S-k" 'org-shiftup
            "C-S-l" 'org-shiftright
            "C-S-h" 'org-shiftleft)

;; 'File' keymaps
    (saheb/leader-keys
        "f" '(:ignore t :wk "File")
        "f s" '(save-buffer :wk "File Save")
        "f m" '(treemacs :wk "File Tree")
        "f f" '(consult-fd :wk "File File")
        "f c" '(dired-create-empty-file :wk "Create File")
        "f d" '(mkdir :wk "Create Directory")
        "f r" '(rename-file :wk "Rename File")
        "f k d" '(delete-directory :wk "Delete Directory") 
        "f P" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
        "f p" '((lambda () (interactive) (find-file "~/.config/emacs/")) :wk "Edit emacs config")
        "f k f" '(delete-file :wk "Delete File"))

    (saheb/leader-keys 
        "s" '(:ignore t :wk "Search")
        "s s" '(consult-grep :wk "Consult Grep")
        "s g" '(consult-git-grep :wk "Consult Git Grep"))

    ;; 'LSP' keymaps

    (saheb/leader-keys
        "c" '(:ignore t :wk "Code")
        "c r" '(lsp-rename :wk "Rename")
        "c a" '(lsp-execute-code-action :wk "Code action")
        "c x" '(consult-lsp-diagnostics :wk "List Diagnostics")
        "c s" '(consult-lsp-file-symbols :wk "List File Symbols")
        "c d" '(lsp-find-references :wk "Find references")
        "c k" '(consult-lsp-symbols :wk "List Symbols")
        "c f" '(lsp-format-buffer :wk "Format buffer"))
    (general-define-key
        :states '(normal visual)
        :keymaps 'override
        "M-k" 'lsp-describe-thing-at-point
        "K" 'lsp-ui-doc-glance)
    (general-define-key
        :states '(normal visual)
        :keymaps 'override
        "g c c" 'evilnc-toggle-invert-comment-line-by-line)

 (general-create-definer saheb/g-keys
        :states '(normal visual)
        :keymaps 'override
        :prefix "g" ;; set g
    )
    (saheb/g-keys 
	    "c" '(:ignore t :wk "Comment")
        "c c" '(comment-line :wk "Comment line")
        "c b" '(comment-box :wk "Comment box"))
;; 'Registers' mappings
    (general-define-key 
	    :states '(normal visual)
	    " \" " '(view-register :wk "Registers"))
;; 'ORG' keymaps to move between headings
    (general-define-key
        :states '(normal visual)
        :keymaps 'org-mode-map
            "gj" 'org-next-visible-heading
            "gk" 'org-previous-visible-heading)
;; Better 'Buffer' navigation
    (general-define-key
        :states '(normal visual emacs)
            "M-i" 'centaur-tabs-forward
            "M-u" 'centaur-tabs-backward)
(general-define-key
        :states '(normal visual emacs)
            "M-j" '(evil-collection-unimpaired-move-text-down :wk "Move Text Down")
            "M-k" '(evil-collection-unimpaired-move-text-up :wk "Move Text Up"))
)
#+end_src
** Which Key
#+begin_src emacs-lisp
(use-package which-key
    :after (general evil)
    :config
    (which-key-mode))
#+end_src
* Language Support
** Setup
#+begin_src emacs-lisp

(use-package lsp-mode
    :defer t
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    :config
        (setq gc-cons-threshold 100000000)
        (setq read-process-output-max (* 1024 1024))) ;; 1mb


(use-package lsp-ui
    :ensure t
    :after lsp-mode
:config
(lsp-ui-mode)
(lsp-ui-peek-mode))

(use-package dap-mode 
        :after lsp-mode 
        :config 
(require 'dap-dlv-go)
(dap-mode 1)
(dap-ui-mode 1)
(dap-ui-controls-mode 1)
(dap-auto-configure-mode))
(use-package realgud
:ensure t
:after lsp-mode)
(use-package consult-lsp
:ensure t
:after lsp-mode
:config
(define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols))
#+end_src
** Formatter
#+begin_src emacs-lisp
#+end_src
** Treesitter
#+begin_src emacs-lisp
(use-package tree-sitter
    :defer t
    :ensure t
    :config
  (global-tree-sitter-mode)
  ;; activate tree-sitter on any buffer containing code for which it has a parser available
  ;; you can easily see the difference tree-sitter-hl-mode makes for python, ts or tsx
  ;; by switching on and off
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(use-package tree-sitter-langs
    :ensure t
    :after tree-sitter)
#+end_src
** Company
#+begin_src emacs-lisp
   (use-package company
    :defer t
    :after lsp-mode
     :config
    (define-key evil-insert-state-map (kbd "C-x C-k") 'company-dict)
     (setq lsp-completion-provider :none)
     (setq company-backends `((:separate company-capf company-yasnippet company-dict)))
     :custom
     (company-begin-commands '(self-insert-command))
     (company-idle-delay 0)
     (company-minimum-prefix-length 1)
     (company-show-numbers t)
     (company-tooltip-align-annotations 't)
     (global-company-mode t))

   (use-package company-box
     :hook (company-mode . company-box-mode))
;;    (use-package auto-complete
;;      :after company
;;      :config
;;          (ac-config-default))
 (use-package company-dict
:after company
:elpaca (:host github :repo "hlissner/emacs-company-dict"))
(use-package company-shell
     :after company
     :config
     ;;for multiple backends
     (add-to-list 'company-backends '(company-shell company-shell-env company-dict  company-fish-shell)))

#+end_src
** Flycheck
#+begin_src emacs-lisp

  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode))

#+end_src
** Snippets
#+begin_src emacs-lisp
(use-package yasnippet
:after company
:config 
(define-key yas-minor-mode-map (kbd "M-o") #'yas-expand)
(yas-minor-mode))
(use-package yasnippet-snippets
:after yasnippet
)
#+end_src
** Git
#+begin_src emacs-lisp
(use-package magit
:defer t
:config
(magit-mode))

(use-package git-gutter
:after magit
:config
(git-gutter-mode)
(global-git-gutter-mode)
)
(use-package git-gutter-fringe
:after magit)
#+end_src
** Languages
*** Go
#+begin_src emacs-lisp
(use-package go-mode
:defer t
    :config
        (setq company-idle-delay 0)
        (setq company-minimum-prefix-length 1)
        ;; Go - lsp-mode
        ;; Set up before-save hooks to format buffer and add/delete imports.
        (defun lsp-go-install-save-hooks ()
        (add-hook 'before-save-hook #'lsp-format-buffer t t)
        (add-hook 'before-save-hook #'lsp-organize-imports t t))
        (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
        ;; Start LSP Mode and YASnippet mode
        (add-hook 'go-mode-hook #'lsp-deferred)
        (add-hook 'go-mode-hook #'yas-minor-mode)
        (setq lsp-go-use-placeholders t)

        (setq lsp-go-analyses '(
                  (shadow . t)
                  (unusedparams . t)
                  (unusedwrite . t)
                  (useany . t)
                  (fieldalignment . t)
                  ))
        (setq lsp-go-codelenses '(
                    (gc_details . :json-false)
                    (generate . t)
                    ))) 
(use-package go-impl
    :after go-mode
    :config
        (custom-set-variables
        '(go-impl-aliases-alist '(("hh" . "http.Handler")
                            ("irw" . "io.ReadWriter")))))
(use-package company-go
:after go-mode)
(use-package flycheck-golangci-lint
  :ensure t
  :hook (go-mode . flycheck-golangci-lint-setup))
(use-package go-tag
:after go-mode
:config
(setq go-tag-args (list "-transform" "camelcase"))
(with-eval-after-load 'go-mode
  (define-key go-mode-map (kbd "C-c t") #'go-tag-add)
  (define-key go-mode-map (kbd "C-c T") #'go-tag-remove)))
(use-package ob-go)

#+end_src
*** Web Mode
#+begin_src emacs-lisp
(use-package js2-mode
:defer t
:config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-hook 'js-mode-hook 'js2-minor-mode)
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
)
(use-package web-mode
:defer t
:config
(add-to-list 'auto-mode-alist '("\\.api\\'" . web-mode))
(add-to-list 'auto-mode-alist '("/*/.*\\.js[x]?\\'" . web-mode))

(setq web-mode-content-types-alist
  '(("json" . "/some/path/.*\\.api\\'")
    ("xml"  . "/other/path/.*\\.api\\'")
    ("jsx"  . "/some/react/path/.*\\.js[x]?\\'")))
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
)
(use-package emmet-mode
:after web-mode
:config
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'web-mode-hook 'emmet-mode)
(add-hook 'html-hook 'emmet-mode)

(add-hook 'html-hook 'emmet-preview-mode)
(add-hook 'sgml-mode-hook 'emmet-preview-mode) ;; Auto-start on any markup modes
(add-hook 'web-mode-hook 'emmet-preview-mode )
)
#+end_src
*** Typescript
#+begin_src emacs-lisp
(use-package typescript-mode
:defer t
:mode "\\.ts\\'"
:hook (typescript-mode . lsp-deferred)
:config 
(setq typescript-indent-level 2))

(use-package tide
:defer t
:config
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)
;; if you use typescript-mode
(add-hook 'typescript-mode-hook #'setup-tide-mode)
;; if you use treesitter based typescript-ts-mode (emacs 29+)
(add-hook 'typescript-ts-mode-hook #'setup-tide-mode)
(add-hook 'tsx-ts-mode-hook #'setup-tide-mode)
(add-hook 'tsx-ts-mode-hook #'emmet-mode)
(add-hook 'js2-mode-hook #'setup-tide-mode)
;; configure javascript-tide checker to run after your default javascript checker
(flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
)
#+end_src
*** Haskell
#+begin_src emacs-lisp
(use-package lsp-haskell
:defer t
        :config
            (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
            (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
            (add-to-list 'completion-ignored-extensions ".hi")
            (add-hook 'haskell-mode-hook #'lsp)
             (add-hook 'haskell-literate-mode-hook #'lsp)
            (add-hook 'lsp-after-initialize-hook
            '(lambda ()
                (lsp--set-configuration
                '(:haskell (:plugin (:tactics (:config (:timeout_duration 5)))))
                )))
            (setq lsp-haskell-server-path "/home/mirsahebali/.ghcup/hls/2.4.0.0/bin/haskell-language-server-wrapper"))

(use-package haskell-mode
:after lsp-mode)
#+end_src
*** C/C++
#+begin_src emacs-lisp
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)
(add-hook 'c-mode-hook 'yas-minor-mode)
(add-hook 'c++-mode-hook 'yas-minor-mode)
(defun lsp-c-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t))
(add-hook 'c++-mode-hook #'lsp-c-save-hooks)
(add-hook 'c-mode-hook #'lsp-c-save-hooks)
 
#+end_src
* Util Package
** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
:defer t)
(use-package treemacs-evil
 :after (treemacs evil)
:ensure t
:config
;;(treemacs-load-theme "Idea")
)

(use-package treemacs-projectile
 :after (treemacs evil projectile)
  :ensure t)

(use-package treemacs-icons-dired
 :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
 :after (treemacs evil magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
 :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
 :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
 :after (treemacs)
  :ensure t
 :config (treemacs-set-scope-type 'Tabs))
#+end_src
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src
** Consult
#+begin_src emacs-lisp
(use-package consult)
#+end_src
** Vertico
#+begin_src emacs-lisp
      (use-package vertico
        :init
          (savehist-mode)
        (vertico-mode)
      (setq completion-in-region-function 'consult-completion-in-region))

#+end_src
** Orderless
#+begin_src emacs-lisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Embark
#+begin_src emacs-lisp
(use-package marginalia
:after vertico
  :ensure t
:custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :bind (:map minibuffer-local-map
            ("M-A" . marginalia-cycle))
  :config
  (marginalia-mode))

(use-package embark
  :ensure t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
** File Tree
*** Dired Coloring
#+begin_src emacs-lisp
(use-package diredfl
:after dired)

(use-package fd-dired
:after dired)
#+end_src
*** Ranger
#+begin_src emacs-lisp
(use-package ranger
        :defer t
        :config
        (setq ranger-override-dired-mode t)
        (setq ranger-cleanup-eagerly t)
        (setq ranger-footer-delay 0.2)
        (setq ranger-preview-delay 0.040)
        (setq ranger-dont-show-binary t))

#+end_src
* UI Themes
** Rainbow mode
#+begin_src emacs-lisp
(use-package rainbow-mode
:defer t
    :diminish
    :hook 
        ((org-mode prog-mode) . rainbow-mode))
#+end_src
** Todo
#+begin_src emacs-lisp
(use-package hl-todo
:ensure t
:config
(setq hl-todo-keyword-faces
      '(("TODO"   . "#FF0000")
        ("FIXME"  . "#FF0000")
        ("DEBUG"  . "#A020F0")
        ("GOTCHA" . "#FF4500")
	    ("NOTE"   . "#00FFEF")
        ("REFACTOR" . "#E4E8FF")
        ("REVIEW". "#FFC0CB")
        ("PERF" . "#7D7EEC")
        ("STUB"   . "#1E90FF")))

        (hl-todo-mode))
#+end_src
** Model line
#+begin_src emacs-lisp
(use-package doom-modeline
:ensure t
:init (doom-modeline-mode 1)
)
#+end_src
** Icons
#+begin_src emacs-lisp
(use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )
 (use-package all-the-icons
   :ensure t
   :if (display-graphic-p))

(use-package all-the-icons-completion
    :config
        (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup)
        (all-the-icons-completion-mode))
 (use-package all-the-icons-dired
   :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
(use-package unicode-fonts
:config
(unicode-fonts-setup))
#+end_src
** Tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :init
  (setq centaur-tabs-enable-key-bindings t)
  :config
  (setq centaur-tabs-style "box"
        centaur-tabs-height 32
        centaur-tabs-set-icons t
        centaur-tabs-show-new-tab-button t
        centaur-tabs-set-modified-marker t
        centaur-tabs-cycle-scope 'tabs
        centaur-tabs-set-bar 'under
        centaur-tabs-show-count nil
        ;; centaur-tabs-label-fixed-length 15
        ;; centaur-tabs-gray-out-icons 'buffer
        ;; centaur-tabs-plain-icons t
        x-underline-at-descent-line t
        centaur-tabs-left-edge-margin nil)
  (centaur-tabs-change-fonts "JetBrainsMono Nerd Font" 110)
  (centaur-tabs-headline-match)
  ;; (centaur-tabs-enable-buffer-alphabetical-reordering)
  ;; (setq centaur-tabs-adjust-buffer-order t)
  (centaur-tabs-mode t)
;;    (centaur-tabs-group-by-projectile-project)
  (setq uniquify-separator "/")
  (setq uniquify-buffer-name-style 'forward)
 :hook
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  )
#+end_src
** Fonts

#+begin_src emacs-lisp

(set-face-attribute 'default nil
  :font "JetBrainsMono Nerd Font"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "JetBrainsMono Nerd Font"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrainsMono Nerd Font"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font-12"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)


#+end_src

** GUI Tweaks

#+begin_src emacs-lisp

    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)


  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  (setq display-line-numbers 'relative)
  
#+end_src

** Packages for UI and theming
*** Theme
#+begin_src emacs-lisp
    (use-package catppuccin-theme
        :init
        (load-theme 'catppuccin)
;;:config
;;(catppuccin-set-color 'base "#000000") ;; change base to #000000 for the currently active flavor
;;(catppuccin-reload)
)
(use-package tokyo-theme
:elpaca (:host github :repo "rawleyfowler/tokyo-theme.el"))
#+end_src
*** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "R.T.F.M.  Run The Funking Monad")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "/home/mirsahebali/.config/emacs/images/Arch-linux-logo.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))

#+end_src
* ORG Mode
** ORG Package
#+begin_src emacs-lisp
(use-package org
:defer t
:elpaca nil
:config
(message "org loaded"))
#+end_src
** Calendar
#+begin_src emacs-lisp

(use-package howm
:after org
)
(use-package calfw
:after org
:defer t
:config
(define-key howm-mode-map (kbd "M-C") 'cfw:elscreen-open-howm-calendar))

(use-package calfw-org
:after org)
#+end_src
** Clip Link
#+begin_src emacs-lisp
(use-package org-cliplink
:after org
:config
(global-set-key (kbd "C-x p i") 'org-cliplink))
#+end_src
** Async Evalulation of SRC blocks
#+begin_src emacs-lisp
(use-package ob-async
:after org
:defer t)
#+end_src
** Fancy Priorites
#+begin_src emacs-lisp
(use-package org-fancy-priorities
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '((?A . "❗")
                                  (?B . "⬆")
                                  (?C . "⬇")
                                  (?D . "☕")
                                  (?1 . "⚡")
                                  (?2 . "⮬")
                                  (?3 . "⮮")
                                  (?4 . "☕")
                                  (?I . "Important"))))
#+end_src
** Superstar
#+begin_src emacs-lisp
(use-package org-superstar
:config
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
)
#+end_src
** Evil Org
#+begin_src emacs-lisp

(use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
            (require 'evil-org-agenda)
            (evil-org-agenda-set-keys)
            (add-hook 'org-mode-hook #'evil-org-mode))
#+end_src

** Indentation
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src
** ORG Bullets
#+begin_src emacs-lisp

(add-hook 'org-mode-hook 'org-indent-mode)

(use-package org-bullets
:after org
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)

#+end_src

** ORG Tempo
- Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |
#+begin_src emacs-lisp

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("go" . "src go"))
#+end_src
** TOC 
#+begin_src emacs-lisp

(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

#+end_src
* Misc Tweaks
** Change Backup directory
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.config/emacs/backup_files"))
      backup-by-copying t    ;; Don't delink hardlinks
      version-control t      ;; use version numbers on backups
      delete-old-versions t  ;; automatically delete excess backups
      kept-new-versions 20   ;; how many of the newest versions to keep
      kept-old-versions 5    ;; and how many of the old
      )

#+end_src
** Transient
#+begin_src emacs-lisp
   (use-package seq
      :ensure t
    :elpaca nil
      :defer t)
(use-package transient
:ensure t)
#+end_src
** Calc Mode
#+begin_src emacs-lisp
(use-package literate-calc-mode
    :defer t
    :ensure t)
#+end_src

** Buffer Move 
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src
** Reload Emacs config
#+begin_src emacs-lisp

(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))

#+end_src
** CPU Profiler
#+begin_src emacs-lisp
(use-package esup
  :ensure t)
#+end_src
** Add & at the end of shell arguments
#+begin_src emacs-lisp
(advice-add #'shell-command :filter-args #'shell-command-git-fix-advice)
(defun shell-command-git-fix-advice (args)
  (when (and
         (not (string-match-p "&[ \t]*$" (car args)))
         (string-match-p "^git +push +" (car args)))
    (setcar args (concat (car args) "&")))
  args)

#+end_src
